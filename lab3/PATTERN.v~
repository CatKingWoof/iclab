`ifdef RTL
    `define CYCLE_TIME 10.0
`endif
`ifdef GATE
    `define CYCLE_TIME 10.0
`endif

`define PAT_NUM 300 
module PATTERN(
           // Output Signals
           clk,
           rst_n,
           in_valid,
           init,
           in0,
           in1,
           in2,
           in3,
           // Input Signals
           out_valid,
           out
       );


/* Input for design */
output reg       clk, rst_n;
output reg       in_valid;
output reg [1:0] init;
output reg [1:0] in0, in1, in2, in3;


/* Output for pattern */
input            out_valid;
input      [1:0] out;

//global
integer latency;
integer total_cycle;
integer total_latency;
integer i_pat;
integer patnum = `PAT_NUM;
integer random_number;

integer answer_count;
/* define clock cycle */
real CYCLE = `CYCLE_TIME;
always #(CYCLE/2.0) clk = ~clk;
reg [1:0]current_position;
integer correct,position;
integer  i,j;
initial begin
    //max_latency = 0;
    reset_task;//spec3
    total_cycle = 0;
    for (i_pat = 0; i_pat < patnum; i_pat = i_pat + 1)begin
        input_task;//spec4 spec5
        wait_out_valid_task; //spec6
        for (answer_count = 0; answer_count < 63; answer_count = answer_count + 1)begin
            if (out_valid === 'b0) begin
                if(out !== 'b0) begin
                    $display ("SPEC 4 IS FAIL!");
                    $finish;
                end
            end
            if (out_valid !== 1||(out!==0&&out!==1&&out!==2&&out!==3)) begin
                $display("SPEC 7 IS FAIL!");
                $finish;
            end
            else if (out_valid === 1) begin
                check_ans_task;
            end
            @(negedge clk);
        end

    end
    YOU_PASS_task;
end


task reset_task; begin
        rst_n = 'b1;
        in_valid = 'b0;
        init = 'bx;
        in0 = 'bx;
        in1 = 'bx;
        in2 = 'bx;
        in3 = 'bx;
        total_latency = 0;
        force clk = 0;
        #CYCLE; rst_n = 0;
        #CYCLE; rst_n = 1;
        if(out_valid !== 1'b0 || out !=='b0) begin //out!==0
            $display("SPEC 3 IS FAIL!");
            $finish;
        end
        #CYCLE; release clk;
    end endtask

integer t;
reg [1:0]start_0;
reg [1:0] track0,track1,track2,track3;
reg [3:0] train_appear;

reg[1:0]map[0:3][0:63];
task input_task; begin
		if (out_valid === 'b0) begin
                if(out !== 'b0) begin
                    $display ("SPEC 4 IS FAIL!");
                    $finish;
                end
            end
        if(out_valid !== 'b0||out!==0) begin  //spec7
            $display ("SPEC 7 IS FAIL!");
            $finish;
        end
        t = $urandom_range(1, 3);
        for(i = 0; i < t; i = i + 1)begin
            if (out_valid === 'b0) begin
                if(out !== 'b0) begin
                    $display ("SPEC 4 IS FAIL!");
                    $finish;
                end
            end
			if (in_valid === 'b1) begin
                    if(out_valid === 'b1) begin
                        $display ("SPEC 5 IS FAIL!");
                        $finish;
                    end
                end
            for (i =0 ;i<4 ;i=i+1 ) begin
                for (j = 0; j<64; j=j+1) begin
                    map[i][j]<=0;
                end
            end
            @(negedge clk);
        end

        start_0=$urandom_range(0,3);
        for(i=0;i<8;i=i+1)begin
            train_appear=$urandom_range(1, 14);
            for(j=0;j<4;j=j+1)
            begin
                in_valid = 1'b1;
                if (out_valid === 'b0) begin
                    if(out !== 'b0) begin
                        $display ("SPEC 4 IS FAIL!");
                        $finish;
                    end
                end
                if (in_valid === 'b1) begin
                    if(out_valid === 'b1) begin
                        $display ("SPEC 5 IS FAIL!");
                        $finish;
                    end
                end

                if(i===0&&j===0)
                begin
                    if(start_0==0)
                    begin
                        if(train_appear[0]===0)
                            init=0;
                        else if(train_appear[1]===0)
                            init=1;
                        else if(train_appear[2]===0)
                            init=2;
                        else
                            init=3;
                    end
                    else if(start_0==1)
                    begin
                        if(train_appear[1]===0)
                            init=1;
                        else if(train_appear[2]===0)
                            init=2;
                        else if(train_appear[3]===0)
                            init=3;
                        else
                            init=0;
                    end
                    else if(start_0==2)
                    begin
                        if(train_appear[2]===0)
                            init=2;
                        else if(train_appear[3]===0)
                            init=3;
                        else if(train_appear[0]===0)
                            init=0;
                        else
                            init=1;
                    end
                    else if(start_0==3)
                    begin
                        if(train_appear[3]===0)
                            init=3;
                        else if(train_appear[0]===0)
                            init=0;
                        else if(train_appear[1]===0)
                            init=1;
                        else
                            init=2;
                    end


                    position=init;
                    current_position<=init;
                end
                else
                begin
                    init='bx;
                end
                track0=$urandom_range(0,2);
                track1=$urandom_range(0,2);
                track2=$urandom_range(0,2);
                track3=$urandom_range(0,2);
                if(train_appear[0])
                    in0=2'b11;
                else if(j===2)
                    in0=track0;
                else
                    in0=2'b00;
                if(train_appear[1])
                    in1=2'b11;
                else if(j===2)
                    in1=track1;
                else
                    in1=2'b00;
                if(train_appear[2])
                    in2=2'b11;
                else if(j===2)
                    in2=track2;
                else
                    in2=2'b00;
                if(train_appear[3])
                    in3=2'b11;
                else if(j===2)
                    in3=track3;
                else
                    in3=2'b00;
                map[0][8*i+j]<=in0;
                map[1][8*i+j]<=in1;
                map[2][8*i+j]<=in2;
                map[3][8*i+j]<=in3;
                @(negedge clk);
            end
            for(j=0;j<4;j=j+1)
            begin
                in_valid = 1'b1;
                if (out_valid === 'b0) begin
                    if(out !== 'b0) begin
                        $display ("SPEC 4 IS FAIL!");
                        $finish;
                    end
                end
                if (in_valid === 'b1) begin
                    if(out_valid === 'b1) begin
                        $display ("SPEC 5 IS FAIL!");
                        $finish;
                    end
                end
                track0=$urandom_range(0,2);
                track1=$urandom_range(0,2);
                track2=$urandom_range(0,2);
                track3=$urandom_range(0,2);
                if(j===2||j==0)
                begin
                    in0=track0;
                    in1=track1;
                    in2=track2;
                    in3=track3;
                end
                else
                begin
                    in0=2'b00;
                    in1=2'b00;
                    in2=2'b00;
                    in3=2'b00;
                end
                map[0][8*i+j+4]<=in0;
                map[1][8*i+j+4]<=in1;
                map[2][8*i+j+4]<=in2;
                map[3][8*i+j+4]<=in3;
                @(negedge clk);
            end
        end
        init = 'bx;
        in_valid = 1'b0;
        in0 = 'bx;
        in1 = 'bx;
        in2 = 'bx;
        in3 = 'bx;
    end endtask

task wait_out_valid_task; begin
        latency = 0;
        while(out_valid !== 1'b1) begin
            latency = latency + 1;
            if (out_valid === 'b0) begin
                if(out !== 'b0) begin
                    $display ("SPEC 4 IS FAIL!");
                    $finish;
                end
            end
			if (in_valid === 'b1) begin
                    if(out_valid === 'b1) begin
                        $display ("SPEC 5 IS FAIL!");
                        $finish;
                    end
                end
            if( latency == 3000) begin
                $display("SPEC 6 IS FAIL!");
                $finish;
            end
            @(negedge clk);
        end
        total_latency = total_latency + latency;
    end endtask
integer golden_out;
task check_ans_task; begin

        if(out===1)begin
            position=position+1;
            current_position<=current_position+1;
        end
        else if(out===2)begin
            position=position-1;
            current_position<=current_position-1;
        end


        if(position>3||position<0) begin
            //$display("%d",answer_count);
            $display("SPEC 8-1 IS FAIL!");
            $finish;
        end
        else if(map[position][answer_count+1]===2'd1&&out!==2'd3)begin
            //$display("%d",answer_count);
            //$display("%d %d   %d",position,answer_count+1,map[position][answer_count+1]);
            $display("SPEC 8-2 IS FAIL!");
            $finish;
        end
        else if(map[position][answer_count+1]===2'd2&&out!==2'd0)begin
            //$display("%d",answer_count);
            //$display("%d %d   %d",position,answer_count+1,map[position][answer_count+1]);
            $display("SPEC 8-3 IS FAIL!");
            $finish;
        end
        else if(map[position][answer_count+1]===2'd3)begin
            //$display("%d",answer_count);
            //$display("%d %d   %d",position,answer_count+1,map[position][answer_count+1]);
            $display("SPEC 8-4 IS FAIL!");
            $finish;
        end
        else if(map[current_position][answer_count]===2'd1&&out===2'd3)begin
            //$display("%d",answer_count);
            //$display("%d %d   %d",current_position,answer_count,map[current_position][answer_count]);
            $display("SPEC 8-5 IS FAIL!");
            $finish;
        end
    end endtask
task YOU_PASS_task; begin
        /*$display ("--------------------------------------------------------------------");
        $display ("                         Congratulations!                           ");
        $display ("                  You have passed all patterns!                     ");
        $display ("--------------------------------------------------------------------");
        repeat(2)@(negedge clk);*/
        $finish;
    end endtask

endmodule
